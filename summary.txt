1. Why did you choose the tools, libraries, and language you used for the coding exercise?I used the Java programming language and standard Java libraries for this coding exercise because I am most comfortable and have the most experience with them. As a language, Java is widely used and has a vast array of libraries and tools available, which makes it a suitable choice for developing applications of different scales and complexities. Moreover, Java provides several features that make it an excellent language for building enterprise applications, including strong type checking, garbage collection, and automatic memory management. Additionally, Java has a large and active community, which means there are many resources and support available to help solve any problems that may arise during development. For this particular exercise, I chose to use the LocalDateTime library for handling timestamps in the CSV file. While I did not use a CSV parsing library, I implemented the functionality for parsing CSV data using Java's standard libraries.2. What are the advantages and disadvantages of your solution?Potential advantages: Using a priority queue allows us  to easily order the transactions based on their timestamps, which is required for the first rule of spending the oldest points first. A hashmap provides constant-time access to the payer balances, allowing us to quickly retrieve and update the balances as transactions are processed. This solution has a time complexity of O(n log n) for inserting the transactions into the priority queue and O(n) for processing them, making it efficient for moderately sized datasets. Potential Disadvantages: Using a priority queue may require extra overhead in terms of memory and processing time, particularly for much larger sets of data, since it requires storing and sorting all transactions. If the dataset is particularly large, the priority queue and hashmap may consume a significant amount of memory, which could slow down the processing time or cause memory issues.3. What has been a favorite school/personal project thus far? What about it that challenged you?My favorite personal project so far has been developing a mobile fitness app called LIGI with a small team of student developers at UW-Madison. We used the Swift language and followed the MVVM design pattern. This project challenged me in a few ways, mainly because I was learning a new language and design methodology apart from what I had learned at UW. Additionally, working on a project that combined my passion for programming and maintaining a healthy lifestyle was a unique and exciting opportunity. Currently, I am working on the analytics section of the app, which will allow users to track their weight and reps over the past week, month, and year. Even though I only work a few hours a week on its development during the school semester when I have time, I'm excited about its progress, and our plan is to release the app around the end of the summer in 2023.One of the biggest challenges of working on the LIGI fitness app has been coordinating with the team to ensure that we are all on the same page and working towards the same goals. Since we all have different schedules and responsibilities, finding time to meet and discuss the project has been difficult at times. Additionally, since we are all students, we have limited experience with professional development practices, which has required us to learn new skills and tools along the way. However, these challenges have also been great opportunities for growth and learning, and I am grateful for the experience.